-----------------------------------------------------------
                      ROUTY OVERVIEW
-----------------------------------------------------------

                 Routy - the routing app!

-----------
 1 a.) Team
-----------

Jeff Tran     - jt982
Ryan Prater   - rp22566
Eric Thompson - ebt297

---------------------
1 b.) Important Notes
---------------------

- Why are there not preferences/settings/menus?

We thought for a while about this, but ended up realizing that settings/preference
menus would really pull our users out of the experience. For this reason, we actually
ended up spending a lot of time getting around ever having to use one. Instead, we
fixed our sounds so that adjusting the sound on the Android device itself will
automatically raise or lower the sounds generated by the app. Our app actually checks
the sound level of the device before it attempts to play it and readjusts its sound
level to match it before it's played.

We also took time to add our special preferences such as a switch to decide between
organizing the routes by distance or time, and placed them in a logical place - the
destinations entering screen. Placing something like this in a settings or preference
menu would be awkward and unintuitive for a user. Why obfuscate/hide an incredibly
important detail such as this preference in a menu? Otherwise, we felt that it was
important to strip our app down to what was necessary for the user to complete the
intended action of the app.

For these many reasons, we opted to not include a settings/preferences menu.


- Google Places API and generating testing addresses

We removed our test data since we now have the Google Places API working. You can type
in the name of a business - try HEB or Trudy's - and we'll automatically find that
location for you. We thought this was easy enough to replace the test data (and we
really want you to use the Google Places feature!).


-----------------------------
 2. Feature List / Use Cases
-----------------------------

Use Cases:

1.) A user can load the app, and be prompted to fix his current connection situation
(the app detects if there is no connection to a network (wifi or cellular)) and gives
the user an error to try again or quit.

2 a.) If the user has a connection to a network, we load the origin screen (after our
sweet opening sound!) and provide the user with multiple ways to start. Pressing our
find me button uses the device's GPS or the network to identify the location of the user.
If GPS is off or the location cannot be determined, an error is thrown making the user
aware. The user can also enter an address for the origin and proceed to the next screen.

2 b.) Once the user is on the destination screen (the next screen) they can enter in a
series of destinations to figure out a route between. You can type approximate names of
your destinations and our app will look up the nearest locations named similarly. For
example, try typing in H-E-B and notice that we pull up the nearest H-E-B to the origin
address and allow you to select from a list of H-E-Bs! We also validate entered addresses
and show you improperly labeled ones by underlining them in red. Where possible, we'll
correct improper addresses as well. Once you're done, click to go to the next screen.

2 c.) Now you're at the result screen where you can see the route calculated based on
Distance or Duration (as the user selected earlier). You can see all the destinations,
including the origin, with custom tags/pins for each for easy referencing. Click on the
Get Directions button to see the actual route in Google Maps.

Features:

1.) Lookup for addresses - connected to Google Places API to allow us to look up addresses
just based off of names (e.g. Ken's Doughnuts).

2.) Dynamic List building (take a look at that destinations screen).

3.) Route calculation for up to 5 destinations (plus the origin) with our own proprietary
algorithm and Google Destinations API.

4.) GPS integration for Find Me! button.

5.) Network connection detection (initial error on startup).

6.) XML and JSON parsing using both manual methods and JSON reader / Xpath in some places
(look at the source for juicy details).

7.) Linking to Google Maps / other apps.

8.) Beautiful logos that are tailored to different screen sizes.

9.) Custom splash screen, gradients, and custom buttons.

10.) Custom sounds for clicks, errors, startup.

11.) A full splash screen that also works on errors.

12.) Error messages using fragments and popup windows.

13.) Movement between different activities using intents and saved states.

14.) Saving state when app is closed or moved to another app (like Google Maps).

15.) Map view with dropped pins for each of the destinations and the origin.


----------------------------------------
 3. Incomplete Feature List / Use Cases
----------------------------------------

All of these will definitely be attempted later, but we include a little bit of the
reasoning for why they weren't addressed/completed.

1.) Trying to get to 10 destinations - we ran into limitations as far as our ability
to make calls to the Google Destinations API without a costly API key. This is also
a version of the traveling salesman problem (yikes!).

2.) Banner logo that changes as you move through the app - this idea fell through as
we began to make our UI cleaner (we just thought it would clutter the screen).

3.) Making a more detailed view of each leg of the route - totally unnecessary since
Google Maps handles this much better than we ever could.

4.) Forcing multiple destinations to maintain a certain order - although it does seem
useful, we decided against this since it seems to fall outside of the scope of Routy's
intended purposes.

5.) Placing route outlines on our mapview - we punted this in favor of other
enhancements/features since placing a route on the mapview required parsing a polyline
string (pretty tough).


---------------------------------
 4. New Feature List / Use Cases
---------------------------------

1.) More custom buttons (like the Route it! button).

2.) Gradients / better styling for UI.

3.) Google Places API - being able to just type in the name of a place.

4.) Map view / custom pins and tags.


----------------------------------------------
 5. List of Classes / Code from Other Sources
----------------------------------------------

None


----------------------------------
 6. List of Classes / Code Chunks
----------------------------------

Routy (bread and butter)

- Destination Activity - Creates the Destination Enter screen, takes input for
destinations, add/remove destinations to your route, validates addresses, uses
Google Places API to lookup addresses, and calls the CalculateRouteTask to generate
the route itself.

- Main Activity - Opens when the icon is clicked for our app; it current preloads the
ConnectivityManager and looks for available networks. We currently sleep for 2 seconds
(this will eventually include a splash screen.

- Origin Activity - Creates the Origin Enter screen, takes input from the user, calls
the LocationService to find the user's location (if necessary), validates addresses (if
entered), and displays error messages.

- Results - Creates the Results screen, displays calculated route/information, and makes
calls to Google Maps.

- Util - Contains utility methods such as methods that go from an address object (JSON
string) and back.


Exception (exception handling help):

- AmbigiuousAddressException - thrown in the event that an address is ambiguous or returns
more than one address.

- GeocoderAPIException - when the geocoder returns a bad status.

- NoInternetConnectionException - thrown when the Internet connection can't be found (cell
or wifi).

- NoLocationProviderException - thrown when NetworkProvider and GPSProvider return nothing
- no way to get the user's location.

- GpsNotEnabledException - thrown when the GPS is not enabled.

- RoutyException - generic exception to display to the user.


Fragments (simple fragments to build dialog boxes):

-ListPickerDialog
-LoadingDialog
-OneButtonDialog
-RoutyAlertDialog
-ThreeButtonDialog
-TwoButtonDialog


Adapter (between Google Places API and our app):

- PlacesListAdapter - self explanatory.


Model (needed Java utility objects):

- AppProperties - saved global static values used by other objects.

- Distance - data object that holds the duration and driving distance as found through
API calls.

- Route - maintains overall distance of route and addresses of the route, in order.

- RouteOptimizerPreference - way to select between distance or duration for routing
preference.

- RouteRequest - packages a request for Android async task to perform the route calculation
before Results Screen.

- GooglePlace - a container class for results obtained from calls to the Google Places API.

- GooglePlacesQuery - another container class that holds/builds the query to the Google
Places API.

- GoogleDirections - Object to hold the directions from the Google Directions API call.

- GoogleDirectionsQuery - Object that builds the query for the Google Directions API call.

- Step - It holds one step of a Google Directions call.


Service (classes that interface with Google/Android API):

- LocationService - uses LocationManager to find providers for finding the user's location
and performs logic to deal with different providers/no known provider/using recent location.

- AddressService - uses the Geocoder to create addresses from latitudes and longitudes, and
creates lats and longs out of addresses. It also parses the webcalls in the event that it 
can't find a Geocoder backend so that it can find or validate addresses.

- DistanceMatrixService - gets distances between the destinations and origin from Google
Distance Matrix API.

- InernetService - gets an http response from a given URL. Used for any web based API.

- RouteService - performs the actual routing algorithm, using other services and their
associated API calls.

- GooglePlacesService - provides the methods to interface with the Google Places API.

- GoogleDirectionsService - Interfaces with the Google Directions web API.


Task:

- CalculateRouteTask - an async task that calculates the route. Placing it here keeps it
from overloading the UI related activities so that responsiveness doesn't suffer.

- FindUserLocationTask - subclass of AsyncTask that checks for connection in main UI.

- GooglePlacesQueryTask - performs the task of querying Google Places.

- TimeoutTask - basically looks for a timeout while performing a task so that a user never
has to wait too long.

- GoogleDirectionsQueryTask - Async task to run a Google Directions API call.


Listener:

- FindUserLocationListener - Used with the FindUserLocationTask to notify you of the result
of trying to locate the user.

- GoogleDirectionsQueryListener - Notifies you of the result from GooglePlacesQueryTask.

MapView:

- MapRouteOverlay - The overlay to draw on the mapview. (not used yet)

- RoutyItemizedOverlay - Draws the points on the mapview.

- MapRoute - Will eventually give us the geopoints along a route when we drop a route on the
mapview. (not used yet).


View:

- DestinationRowView - Object to represent an individual row in the destinations view.

- ResultsSegmentView - Object to represent one segment of the route on the results screen.
